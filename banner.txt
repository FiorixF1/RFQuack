                   ,-.
               ,--' ~.).
             ,'         `.
            ; (((__   __)))      Welcome to RFQuack!
            ;  ( (#) ( (#)
            |   \_/___\_/|              The versatile
           ,"  ,-'    `__".             RF-hacking tool that quacks!
          (   ( ._   ____`.)--._        _
           `._ `-.`-' \(`-'  _  `-. _,-' `-/`.
            ,')   `.`._))  ,' `.   `.  ,','  ;   ~~~
          .'  .     `--'  /     ).   `.      ;
         ;     `-        /     '  )         ;           ~~~~
         \                       ')       ,'    ~~  ~
          \                     ,'       ;           ~~
           \               `~~~'       ,'               ~~~  ~~    ~~~~~
            `.                      _,'             ~~~
        hjw   `.                ,--'
        ~~~~~~~~`-._________,--'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        ------------------------------------------------------------------------

        > q.set_modem_config(               # set modem configuration
            modemConfigChoiceIndex=0,       # see RadioHAL documentation
            txPower=14,                     # TX output power in dB
            syncWords=b'\x43\x42',          # sync words
            carrierFreq=433)                # and of course, carrier frequency

        > q.set_packet('\x0d\xa2', 13)      # transmit '0xd 0xa2' 13 times

        > q.set_modem_config(               # set modem configuration
            modemConfigChoiceIndex=0,       # see RadioHAL documentation
            txPower=14,                     # TX output power in dB
            syncWords='',                   # disable sync-word matching
            carrierFreq=433)                # and of course, carrier frequency

                                            # Example: with RFM69
                                            # -------------------
        > q.set_register(                   #  truly promiscuous mode:
            0x2e,                           #  1) set register 0x2e
            0b01000000                      #     to 0b01000000
            )                               #
        > q.set_register(                   #
            0x37,                           #  2) set register 0x37
            0b01000000                      #     to 0b11000000
            )

        > q.add_packet_filter(              # ignore packets
            pattern="^AB[cd]"               # not matching this regex
        )

        > q.add_packet_modification(        # modify packets as follows:
            pattern="[ke]$",                #  if they end with 'k' or 'e'
            position=3,                     #  at position = 3 in the payload
            content=b'\\x29',               #  and position = indexOf(0x29)
            operation=2                     #  content[position] |= 0x25
            operand=b'\\x25'
        )

        > q.repeat(10)                      # stay in RX and
                                            # modify each matching packet
                                            # transmit the result 10 times

        > q.reset_packet_modifications()
                                        # clear all packet modifications

        HELP:
        > q.set_mode?                # TAB is your friend

        EXIT:   Just type CTRL-D a couple of times!
