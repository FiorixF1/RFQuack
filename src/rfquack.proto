// RFQuack is a versatile RF-hacking tool that allows you to sniff, analyze, and
// transmit data over the air. Consider it as the modular version of the great
// 
// Copyright (C) 2019 Trend Micro Incorporated
// 
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation; either version 2 of the License, or (at your option) any later
// version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
// PARTICULAR PURPOSE.  See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with
// this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

syntax = "proto2";
package rfquack;

enum Mode {
  // RX means that whatever packet (matching the preamble and sync word (if
  // any)) will be sent to the clients that are subscribed to the `rx_packet`
  // topic.
  RX = 1;

  // TX means that whatever packet a client sends via the `tx_packet` topic
  // will be transmitted.
  TX = 2;

  // Repeat mode means that whatever packet matching the preamble and sync
  // word (if any) is received, it will be manipulated according to the
  // manipulation rules (if any) configured via the `packet_mod` topic; the
  // resulting modified packet will be re-transmitted immediately.
  REPEAT = 3;

  // Put the radio in idle mode (if the driver permits this)
  IDLE = 4;
}

message Stats {
  required uint32 rx_packets = 1;
  required uint32 tx_packets = 2;
  required uint32 rx_failures = 3;
  required uint32 tx_failures = 4;
  required uint32 tx_queue = 5;
  required uint32 rx_queue = 6;
}

// Modem configuration
message ModemConfig {
  optional float carrierFreq = 1;
  optional uint32 txPower = 2;
  optional bool isHighPowerModule = 3;
  optional uint32 preambleLen = 4;
  optional bytes syncWords = 5;

  // Canned modem configuration based on the RadioHead radio driver.
  //
  // For example, if RFQuack is using the RF69 radio chip, the index choice must
  // fall within this enum type:
  // https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF69.html#a8b7db5c6e4eb542f46fec351b2084bbe
  optional uint32 modemConfigChoiceIndex = 6;
}

// Status of the tool with various statistics
message Status {
  optional Stats stats = 1;
  optional Mode mode = 2;
  optional ModemConfig modemConfig = 3;
  required uint32 tx_repeat_default = 4 [default = 0];
}

// This is either a RX or TX packet
message Packet {
  required bytes data = 1;
  optional uint64 millis = 2;
  optional uint32 repeat = 3;
  optional uint64 delayMs = 4;
}

// Send multiple packets in sequence, with optional delay
message Packets {
  repeated Packet packet = 1;
  optional uint64 delayMs = 2;
}

// Get or set a given register to the value
message Register {
  required uint32 address = 1;
  optional uint32 value = 2;
}

// Get or set an array of registers
message Registers { repeated Registers registers = 1; }

// A packet-modification rule: here you can tell the tool how to modify a given
// byte of the packet, and re-transmit it when in attakc mode. For example you
// could XOR byte four with a given operand, and re-transmit the packet so
// obtained.
//
// Note that a packet manipulation can be used as a simple filter. Just set
// a pattern and nothing else.
message PacketModification {
  optional uint32 position =
      1; // position in the packet <- this takes priority over the content
  optional uint32 content = 2; // position = all indexOf(content)

  enum Op {
    AND = 1;    // packet[position] = packet[position] & operand
    OR = 2;     // packet[position] = packet[position] | operand
    XOR = 3;    // packet[position] = packet[position] ^ operand
    NOT = 4;    // packet[position] = ~packet[position]
    SLEFT = 5;  // packet[position] = packet[position] << operand
    SRIGHT = 6; // packet[position] = packet[position] >> operand
  }

  optional Op operation = 3;
  optional uint32 operand = 4;

  // Apply modifications only to packets matching a given pattern
  optional string pattern = 5;
}

// Packet filter based on regex pattern
message PacketFilter {
  required string pattern = 1;
}
